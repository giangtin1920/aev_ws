// Generated by gencpp from file usbCAN_pkg/CAN_msg.msg
// DO NOT EDIT!


#ifndef USBCAN_PKG_MESSAGE_CAN_MSG_H
#define USBCAN_PKG_MESSAGE_CAN_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace usbCAN_pkg
{
template <class ContainerAllocator>
struct CAN_msg_
{
  typedef CAN_msg_<ContainerAllocator> Type;

  CAN_msg_()
    : id(0)
    , type(0)
    , length(0)
    , data()  {
      data.assign(0);
  }
  CAN_msg_(const ContainerAllocator& _alloc)
    : id(0)
    , type(0)
    , length(0)
    , data()  {
  (void)_alloc;
      data.assign(0);
  }



   typedef uint32_t _id_type;
  _id_type id;

   typedef uint8_t _type_type;
  _type_type type;

   typedef uint8_t _length_type;
  _length_type length;

   typedef boost::array<uint8_t, 8>  _data_type;
  _data_type data;





  typedef boost::shared_ptr< ::usbCAN_pkg::CAN_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::usbCAN_pkg::CAN_msg_<ContainerAllocator> const> ConstPtr;

}; // struct CAN_msg_

typedef ::usbCAN_pkg::CAN_msg_<std::allocator<void> > CAN_msg;

typedef boost::shared_ptr< ::usbCAN_pkg::CAN_msg > CAN_msgPtr;
typedef boost::shared_ptr< ::usbCAN_pkg::CAN_msg const> CAN_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::usbCAN_pkg::CAN_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::usbCAN_pkg::CAN_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::usbCAN_pkg::CAN_msg_<ContainerAllocator1> & lhs, const ::usbCAN_pkg::CAN_msg_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.type == rhs.type &&
    lhs.length == rhs.length &&
    lhs.data == rhs.data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::usbCAN_pkg::CAN_msg_<ContainerAllocator1> & lhs, const ::usbCAN_pkg::CAN_msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace usbCAN_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::usbCAN_pkg::CAN_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::usbCAN_pkg::CAN_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::usbCAN_pkg::CAN_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::usbCAN_pkg::CAN_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::usbCAN_pkg::CAN_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::usbCAN_pkg::CAN_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::usbCAN_pkg::CAN_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "92ef1a7d09d3119fcbbcfe293f3fd075";
  }

  static const char* value(const ::usbCAN_pkg::CAN_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x92ef1a7d09d3119fULL;
  static const uint64_t static_value2 = 0xcbbcfe293f3fd075ULL;
};

template<class ContainerAllocator>
struct DataType< ::usbCAN_pkg::CAN_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "usbCAN_pkg/CAN_msg";
  }

  static const char* value(const ::usbCAN_pkg::CAN_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::usbCAN_pkg::CAN_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 id\n"
"uint8 type\n"
"uint8 length\n"
"uint8[8] data\n"
;
  }

  static const char* value(const ::usbCAN_pkg::CAN_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::usbCAN_pkg::CAN_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.type);
      stream.next(m.length);
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CAN_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::usbCAN_pkg::CAN_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::usbCAN_pkg::CAN_msg_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.id);
    s << indent << "type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.type);
    s << indent << "length: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.length);
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.data[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // USBCAN_PKG_MESSAGE_CAN_MSG_H
